---
import { type CollectionEntry, getCollection } from "astro:content";
import PageLayout from "@/layouts/PageLayout.astro";
import Container from "@/components/Container.astro";
import Link from "@/components/Link.astro";
import BackToPrev from "@/components/BackToPrev.astro";
import FormattedDate from "@/components/FormattedDate.astro";
import { readingTime } from "@/lib/utils";

export async function getStaticPaths() {
  const projects = (await getCollection("projects"))
    .filter(project => !project.data.draft)
    .sort((a, b) => b.data.date.valueOf() - a.data.date.valueOf());
  return projects.map((project) => ({
    params: { slug: project.slug },
    props: project,
  }));
}

type Props = CollectionEntry<"projects">;

const project = Astro.props;
const { Content } = await project.render();
---

<PageLayout title={project.data.title} description={project.data.description}>
  <Container>
    <div class="animate">
      <BackToPrev href="/projects">
        Back to projects
      </BackToPrev>
    </div>
    
    <div class="space-y-1 my-10">
      <div class="animate flex items-center gap-1.5">
        <div class="font-base text-sm">
          <FormattedDate date={project.data.date} />
        </div>
        &bull;
        <div class="font-base text-sm">
          {readingTime(project.body)} min read
        </div>
      </div>
      <div class="animate text-2xl font-semibold text-black dark:text-white">
        {project.data.title}
      </div>
      
      {(project.data.demoURL || project.data.repoURL) && (
        <div class="animate flex flex-wrap gap-2 text-sm">
          {project.data.demoURL && (
            <Link href={project.data.demoURL} class="px-3 py-1 bg-black/5 dark:bg-white/10 rounded-md">
              üåê Live Demo
            </Link>
          )}
          {project.data.repoURL && (
            <Link href={project.data.repoURL} class="px-3 py-1 bg-black/5 dark:bg-white/10 rounded-md">
              üìÅ Repository
            </Link>
          )}
        </div>
      )}
      
      {project.data.tags && (
        <div class="animate flex flex-wrap gap-2 text-sm">
          {project.data.tags.map((tag) => (
            <span class="px-2 py-1 bg-black/5 dark:bg-white/10 rounded-md">
              #{tag}
            </span>
          ))}
        </div>
      )}
    </div>
    
    <article class="animate">
      <Content />
    </article>
  </Container>
</PageLayout>